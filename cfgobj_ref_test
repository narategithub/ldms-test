#!/usr/bin/env python3

#
# samp - multi-instance json_stream_sampler and single instance meminfo
# agg  - prdcr + updtr
#
# Test scenario:
# - set LDMSD_CFGOBJ_REF_DEBUG env var to enable ref debug log
# - samp load meminfo, j0 and j1 (json_stream_sampler instances)
# - agg  add prdcr and updtr
# - check `init` ref debug log messages for meminfo, j0 and j1 on samp
# - check `init` ref debug log messages for prdcr and updtr on agg
# - `ldms_ls` check on agg
# - stop + delete updtr on agg
# - stop + delete prdcr on agg
# - stop + delete meminfo, j0, j1 on samp
# - check `free` ref debug log messages for meminfo, j0 and j1 on samp
# - check `free` ref debug log messages for prdcr and updtr on agg

import os
import re
import pwd
import pdb
import sys
import json
import time
import argparse
import TADA
import logging
import atexit

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, jprint, parse_ldms_ls, py_pty

if __name__ != "__main__":
    raise RuntimeError("This should not be impoarted as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Test cfgobj references" )
add_common_args(ap)
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
COMMIT_ID = args.commit_id
SRC = args.src
CLUSTERNAME = args.clustername
DB = args.data_root
LDMSD_PORT = 411

#### spec #### -------------------------------------------------------
spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s test_agg cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
        "ldmsd-base" : {
            "type" : "ldmsd",
            "listen" : [
                { "port" : LDMSD_PORT, "xprt" : "sock" },
            ],
        },
        "prdcr" : {
            "host" : "%name%",
            "port" : LDMSD_PORT,
            "xprt" : "sock",
            "type" : "active",
            "interval" : 1000000,
        },
    }, # templates
    "nodes" : [
        {
            "hostname" : "samp",
            "component_id" : 1,
            "daemons" : [
                {
                    "name" : "sshd", # for debugging
                    "type" : "sshd",
                },
                {
                    "name" : "sampler-daemon",
                    "!extends" : "ldmsd-base",
                    "config" : [
                        f"load name=j0 plugin=json_stream_sampler",
                        f"config name=j0 stream=s0 producer=%hostname%"
                        f" instance=%hostname%/s0 component_id=%component_id%",
                        f"start name=j0 interval=1s offset=0",
                        f"load name=j1 plugin=json_stream_sampler",
                        f"config name=j1 stream=s1 producer=%hostname%"
                        f" instance=%hostname%/s1 component_id=%component_id%",
                        f"start name=j1 interval=1s offset=0",
                        f"load name=meminfo",
                        f"config name=meminfo producer=%hostname%"
                        f" instance=%hostname%/meminfo component_id=%component_id%",
                        f"start name=meminfo interval=1s offset=0",
                    ],
                },
            ]
        },
        {
            "hostname" : "agg",
            "daemons" : [
                {
                    "name" : "sshd",
                    "type" : "sshd",
                },
                {
                    "name" : "agg",
                    "!extends" : "ldmsd-base",
                    "offset" : 200000,
                    "prdcrs" : [ # these producers will turn into `prdcr_add`
                        {
                            "name" : "samp",
                            "!extends" : "prdcr",
                        },
                    ],
                    "config" : [
                        f"prdcr_start_regex regex=.*",
                        f"updtr_add name=all interval=1000000 offset=200000",
                        f"updtr_prdcr_add name=all regex=.*",
                        f"updtr_start name=all",
                    ],
                },
            ]
        }
    ], # nodes

    #"image": "ovis-centos-build:slurm",
    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": args.image,
    "ovis_prefix": PREFIX,
    "env" : { "FOO": "BAR", "LDMSD_CFGOBJ_REF_DEBUG": "1" },
    "mounts": [
        f"{DB}:/db:rw",
        f"{os.path.realpath(sys.path[0])}:/tada-src:ro",
    ] + args.mount +
    ( ["{0}:{0}:ro".format(SRC)] if SRC else [] ),
}

#### test definition ####

test = TADA.Test(test_suite = "LDMSD",
                 test_type = "FVT",
                 test_name = "cfgobj_ref_test",
                 test_desc = "ldmsd cfgobj reference test",
                 test_user = args.user,
                 commit_id = COMMIT_ID,
                 tada_addr = args.tada_addr)
test.add_assertion(1, "Check `init` references on samp after load")
test.add_assertion(2, "Check `init` references on agg after updtr/prdcr add")
test.add_assertion(3, "Check `sets on agg")
test.add_assertion(4, "Check `free` references on samp after term")
test.add_assertion(5, "Check `free` references on agg after updtr/prdcr del")

#### Start! ####
cluster = None
test.start()

@atexit.register
def at_exit():
    rc = test.finish()
    if cluster is not None:
        cluster.remove()
    os._exit(rc)

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

agg = cluster.get_container("agg")
samp = cluster.get_container("samp")

log.info("-- Start daemons --")
cluster.start_daemons()
cluster.make_known_hosts()

log.info("... wait a bit to make sure ldmsd's are up and data are flowing in")
time.sleep(10)

p1 = py_pty(samp, "/tada-src/python/json_stream_publish.py")

s00 = p1.pycmd("s00")
s01 = p1.pycmd("s01")
s10 = p1.pycmd("s10")
s11 = p1.pycmd("s11")

s00 = eval(s00)
s01 = eval(s01)
s10 = eval(s10)
s11 = eval(s11)

out10 = p1.pycmd("x.stream_publish('s0', s00)")
out11 = p1.pycmd("x.stream_publish('s1', s10)")
time.sleep(4)

def get_ref_recs(cont):
    rc, out = cont.exec_run("/tada-src/python/cfgobj_ref_log_extract.py" \
                            "      /var/log/ldmsd.log")
    assert(rc == 0)
    recs = json.loads(out)
    return recs


# test.add_assertion(1, "Check `init` references on samp after load")
cond1 = True
while True: # will break
    cond1 = False
    _recs = get_ref_recs(samp)
    plugins = list(filter( lambda r: r[2] == "plugin", _recs ))
    if len(plugins) != 3:
        test.assert_test(1, False, f"Expecting 3 plugin recods, but got: {plugins}.")
        break
    names = set( p[3] for p in plugins )
    cmp   = set( [ "j0", "j1", "meminfo" ] )
    if names != cmp:
        test.assert_test(1, False, f"Expecting {cmp}, but got: {names}.")
        break
    test.assert_test(1, True, f"Verified.")
    cond1 = True
    break

# test.add_assertion(2, "Check `init` references on agg after updtr/prdcr add")
while True: # will break
    cond2 = False
    _recs = get_ref_recs(agg)
    objs = list(filter( lambda r: r[2] in [ "prdcr", "updtr" ], _recs ))
    if len(objs) != 2:
        test.assert_test(2, False, f"Expecting 2 plugin recods, but got: {objs}.")
        break
    names = set( p[3] for p in objs )
    cmp   = set( [ "samp", "all" ] )
    if names != cmp:
        test.assert_test(2, False, f"Expecting {cmp}, but got: {names}.")
        break
    test.assert_test(2, True, f"Verified.")
    cond2 = True
    break

# test.add_assertion(3, "Check `sets on agg")
while True: # will break
    rc, out = agg.exec_run(f"/tada-src/python/ldms_ls.py -h agg -l")
    data = json.loads(out)
    names = set(data.keys())
    cmp   = set([ 'samp/s0', 'samp/s1', 'samp/meminfo' ])
    if names != cmp:
        test.assert_test(3, False, f"Expecting {cmp}, but got: {names}.")
        break
    test.assert_test(3, True, f"Verified.")
    break

# test.add_assertion(4, "Check `free` references on samp after term")
while cond1: # will break
    rc, out = samp.config_ldmsd("stop name=j0")
    assert(rc == 0)
    rc, out = samp.config_ldmsd("stop name=j1")
    assert(rc == 0)
    rc, out = samp.config_ldmsd("stop name=meminfo")
    assert(rc == 0)
    time.sleep(3)
    rc, out = samp.config_ldmsd("term name=j0")
    assert(rc == 0)
    rc, out = samp.config_ldmsd("term name=j1")
    assert(rc == 0)
    rc, out = samp.config_ldmsd("term name=meminfo")
    assert(rc == 0)
    time.sleep(3)
    _recs = get_ref_recs(samp)
    ref_free = list(filter( lambda r: r[0] == "ref_free", _recs ))
    ref_free_addr = [ r[1] for r in ref_free ]
    plug_addr = [ r[1] for r in plugins ]
    ref_free_addr.sort()
    plug_addr.sort()
    if ref_free_addr != plug_addr:
        test.assert_test(4, False, f"Expecting {plug_addr}, but got {ref_free_addr}")
        break
    test.assert_test(4, True, f"all plugin references are freed")
    break

input("Press ENTER to continue")

# test.add_assertion(5, "Check `free` references on agg after updtr/prdcr del")
while cond2: # will break
    rc, out = agg.config_ldmsd("updtr_stop name=all") # updtr
    assert(rc == 0)
    time.sleep(2)
    rc, out = agg.config_ldmsd("prdcr_stop name=samp") # prdcr
    assert(rc == 0)
    time.sleep(2)
    rc, out = agg.config_ldmsd("updtr_prdcr_del name=all regex=.*") # updtr
    assert(rc == 0)
    time.sleep(2)
    rc, out = agg.config_ldmsd("updtr_del name=all") # updtr
    assert(rc == 0)
    time.sleep(2)
    rc, out = agg.config_ldmsd("prdcr_del name=samp") # prdcr
    assert(rc == 0)
    time.sleep(2)
    _recs = get_ref_recs(agg)
    ref_free = list(filter( lambda r: r[0] == "ref_free", _recs ))
    ref_free_addr = [ r[1] for r in ref_free ]
    objs_addr = [ r[1] for r in objs ]
    ref_free_addr.sort()
    objs_addr.sort()
    if ref_free_addr != objs_addr:
        test.assert_test(5, False, f"Expecting {objs_addr}, but got {ref_free_addr}")
        break
    test.assert_test(5, True, f"all prdcr/updtr references are freed")
    break

# see `at_exit()` function
