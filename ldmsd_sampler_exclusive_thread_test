#!/usr/bin/env python3

# NOTE A test for `exclusive_thread` attribute for sampler plugins.

import os
import re
import pwd
import sys
import json
import time
import argparse
import TADA
import logging
import atexit

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, jprint, parse_ldms_ls, \
                      PyPty

if __name__ != "__main__":
    raise RuntimeError("This should not be impoarted as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Run test scenario of 4 samplers " \
                             "(or more) -> 2 x agg-1 -> agg-2." )
add_common_args(ap)
ap.add_argument("--num-compute", type = int,
                default = 4,
                help = "Number of compute nodes.")
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
COMMIT_ID = args.commit_id
SRC = args.src
CLUSTERNAME = args.clustername
DB = args.data_root
NUM_COMPUTE = args.num_compute
LDMSD_PORT = 411
STORE_ROOT = "/store" # path inside container (agg-2)

#### spec #### -------------------------------------------------------
common_plugin_config = [
        "component_id=%component_id%",
        "instance=%hostname%/%plugin%",
        "producer=%hostname%",
    ]
spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s test_agg cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
    }, # templates
    "nodes" : [
        {
            "hostname" : "node-1",
            "component_id" : 1,
            "daemons" : [
                {
                    "name" : "sshd", # for debugging
                    "type" : "sshd",
                },
                {
                    "name" : "sampler-daemon",
                    "type" : "ldmsd",
                    "listen" : [
                        { "port" : LDMSD_PORT, "xprt" : "sock" },
                    ],
                    "samplers" : [
                        {
                            "plugin" : "meminfo",
                            "interval" : 1000000,
                            "offset" : 0,
                            "config" : common_plugin_config + [
                                            "exclusive_thread=1"
                                        ],
                            "start" : True,
                        },
                        {
                            "plugin" : "vmstat",
                            "interval" : 1000000,
                            "offset" : 0,
                            "config" : common_plugin_config,
                            "start" : True,
                        },
                    ],
                },
            ],
        }
    ], # nodes

    #"image": "ovis-centos-build:slurm",
    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": args.image,
    "ovis_prefix": PREFIX,
    "env" : { "FOO": "BAR" },
    "mounts": [
        "{}:/db:rw".format(DB),
        "{0}:{1}:ro".format(os.path.realpath(sys.path[0]), "/tada-src"),
    ] + args.mount +
    ( ["{0}:{0}:ro".format(SRC)] if SRC else [] ),
}

#### test definition ####

test = TADA.Test(test_suite = "LDMSD",
                 test_type = "FVT",
                 test_name = "ldmsd_sampler_exclusive_thread_test",
                 test_desc = "Test exclusive_thread sampler attribute",
                 test_user = args.user,
                 commit_id = COMMIT_ID,
                 tada_addr = args.tada_addr)

test.add_assertion(1, "meminfo run with exclusive thread")
test.add_assertion(2, "meminfo stop; exclusive thread exited")
test.add_assertion(3, "meminfo start with exclusive_thread=0")
test.add_assertion(4, "meminfo restart with exclusive_thread=1")

#### Helper Functions ####

def bind(inst, name, fn):
    setattr(inst, name, fn.__get__(inst, type(inst)))

def node_ldms_ls_json(node:LDMSDContainer, *args):
    cmd = "/tada-src/python/ldms_ls.py"
    for a in args:
        cmd += f" {a}"
    rc, out = node.exec_run(cmd)
    obj = json.loads(out)
    return rc, obj

# py.comm()
def py_comm(py:PyPty, call_txt):
    out = py.cmd(f"comm.{call_txt}")
    rc, txt = eval(out)
    obj = json.loads(txt) if txt else txt
    return rc, obj

def get_ts(obj):
    # obj is a result from `ldms_ls_json()`
    return { k: v['timestamp']['sec'] + v['timestamp']['usec']*1e-6 \
                            for k, v in obj.items() }

#### Start! ####
cluster = None
test.start()

@atexit.register
def at_exit():
    rc = test.finish()
    if cluster is not None:
        cluster.remove()
    os._exit(rc)

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

node1 = cluster.get_container("node-1")
bind(node1, "ldms_ls_json", node_ldms_ls_json)

log.info("-- Start daemons --")
cluster.start_daemons()
cluster.make_known_hosts()

log.info("... wait a bit to make sure ldmsd's are up")
time.sleep(5)

_comm = f"""\
import time
from ldmsd import ldmsd_communicator as ldmsd_comm
comm = ldmsd_comm.Communicator("sock", "localhost", "{LDMSD_PORT}")
comm.connect()
"""

# setup py Pty
py = PyPty(node1)
for l in _comm.splitlines():
    py.cmd(l)
bind(py, "comm", py_comm)

# test.add_assertion(1, "meminfo run with exclusive thread")
while True: # will break
    ts1 = float(py.cmd("time.time()"))
    time.sleep(1.5)
    rc, st1 = py.comm("thread_stats()")
    rc, ls1 = node1.ldms_ls_json()
    lts = get_ts(ls1)
    mem_ts = lts['node-1/meminfo']
    vm_ts = lts['node-1/vmstat']
    if mem_ts < ts1:
        test.assert_test(1, False,
                f"meminfo not sampling? ts ({mem_ts}) < expect ts ({ts1})")
        break
    if vm_ts < ts1:
        test.assert_test(1, False,
                f"vmstat not sampling? ts ({vmstat_ts}) < expect ts ({ts1})")
        break
    xt = st1['xthreads']
    if len(xt) != 1 or xt[0]['name'] != 'xthread_meminfo':
        test.assert_test(1, False, f"Unexpected xthreads data: {xt}")
        break;
    test.assert_test(1, True, f"verified")
    break

time.sleep(1)

# test.add_assertion(2, "meminfo stop; exclusive thread exited")
while True: # will break
    rc, ret2 = py.comm("plugn_stop('meminfo')")
    ts2 = float(py.cmd("time.time()"))
    time.sleep(1.5)
    rc, st2 = py.comm("thread_stats()")
    rc, ls2 = node1.ldms_ls_json()
    lts = get_ts(ls2)
    mem_ts = lts['node-1/meminfo']
    vm_ts = lts['node-1/vmstat']
    if mem_ts >= ts2:
        test.assert_test(2, False,
                f"meminfo not stopped: ts ({mem_ts}) >= expect ts ({ts2})")
        break
    if vm_ts < ts2:
        test.assert_test(2, False,
                f"vmstat not sampling? ts ({vmstat_ts}) < expect ts ({ts2})")
        break
    xt = st2['xthreads']
    if xt != []:
        test.assert_test(2, False, f"Unexpected xthreads data: {xt}")
        break;
    test.assert_test(2, True, f"verified")
    break

# test.add_assertion(3, "meminfo start with exclusive_thread=0")
while True: # will break
    rc, ret3 = py.comm("plugn_start('meminfo', '1s', xthread=0)")
    ts3 = float(py.cmd("time.time()"))
    time.sleep(2)
    rc, st3 = py.comm("thread_stats()")
    rc, ls3 = node1.ldms_ls_json()
    lts = get_ts(ls3)
    mem_ts = lts['node-1/meminfo']
    vm_ts = lts['node-1/vmstat']
    if mem_ts < ts3:
        test.assert_test(3, False,
                f"meminfo not sampling? ts ({mem_ts}) < expect ts ({ts2})")
        break
    if vm_ts < ts3:
        test.assert_test(3, False,
                f"vmstat not sampling? ts ({vmstat_ts}) < expect ts ({ts2})")
        break
    xt = st3['xthreads']
    if xt != []:
        test.assert_test(3, False, f"Unexpected xthreads data: {xt}")
        break;
    test.assert_test(3, True, f"verified")
    break

# test.add_assertion(4, "meminfo restart with exclusive_thread=1")
while True:
    rc, ret4 = py.comm("plugn_stop('meminfo')")
    time.sleep(0.5)
    rc, ret4 = py.comm("plugn_start('meminfo', '1s', xthread=1)")
    ts4 = float(py.cmd("time.time()"))
    time.sleep(2)
    rc, st4 = py.comm("thread_stats()")
    rc, ls4 = node1.ldms_ls_json()
    lts = get_ts(ls4)
    mem_ts = lts['node-1/meminfo']
    vm_ts = lts['node-1/vmstat']
    if mem_ts < ts4:
        test.assert_test(4, False,
                f"meminfo not sampling? ts ({mem_ts}) < expect ts ({ts4})")
        break
    if vm_ts < ts4:
        test.assert_test(4, False,
                f"vmstat not sampling? ts ({vmstat_ts}) < expect ts ({ts4})")
        break
    xt = st4['xthreads']
    if len(xt) != 1 or xt[0]['name'] != 'xthread_meminfo':
        test.assert_test(4, False, f"Unexpected xthreads data: {xt}")
        break;
    test.assert_test(4, True, f"verified")
    break

# see `at_exit()` function
