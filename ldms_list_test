#!/usr/bin/env python3
#
# ldms_list_test -- test `ldms_list` feature
#
# - setup:
#   - ldmsd sampler with list_sampler (port 411)
#   - list_samp.py -- python-based LDMS provider (interactive control),
#                     port 412, containing 3 sets:
#     - set1 -- the set with 1 set buffer,
#     - set3_p -- the set with 3 preserved set buffers (WITHOUT data-copy),
#     - set3_c -- the set with 3 set buffers with data-copy.
#   - list_agg.py -- python-based LDMS consumer (interactive control),
#                    collecting sets from list_samp.py and the ldmsd sampler.
#
# - Test cases:
#   - verify list_sampler data correctness on list_agg.py
#   - for set1, set3_p, and set3_c
#     - 3x sampling & update to fill the set buffer, verify data for each
#       sampling/update to see if list append works.
#     - transaction begin/end without metric modification to see if set3_p
#       preserved the existing buffer data, and if set3_c copied the data from
#       the previous buffer.
#     - transaction begin -> delete an element from the list -> transaction end,
#       and verify if the list delete works.
#     - transaction begin -> transaction end, and check if this time set3_p
#       copied over the data into the new buffer. We expect set3_p to copy over
#       the data even though the data-copy is off due to the list delete in the
#       previous step changed the heap structure.


import os
import io
import re
import pwd
import sys
import json
import time
import atexit
import argparse
import TADA
import logging

from distutils.spawn import find_executable
from LDMS_Test import LDMSDCluster, LDMSDContainer, process_args, \
                      add_common_args, jprint, parse_ldms_ls

if __name__ != "__main__":
    raise RuntimeError("This should not be impoarted as a module.")

class Debug(object):
    pass
D = Debug()

logging.basicConfig(format = "%(asctime)s %(name)s %(levelname)s %(message)s",
                    level = logging.INFO)

log = logging.getLogger(__name__)

exec(open(os.getenv("PYTHONSTARTUP", "/dev/null")).read())

#### default values #### ---------------------------------------------
sbin_ldmsd = find_executable("ldmsd")
if sbin_ldmsd:
    default_prefix, a, b = sbin_ldmsd.rsplit('/', 2)
else:
    default_prefix = "/opt/ovis"

#### argument parsing #### -------------------------------------------
ap = argparse.ArgumentParser(description = "Test ldms_list feature")
add_common_args(ap)
args = ap.parse_args()
process_args(args)

#### config variables #### ------------------------------
USER = args.user
PREFIX = args.prefix
COMMIT_ID = args.commit_id
SRC = args.src
CLUSTERNAME = args.clustername
DB = args.data_root
LDMSD_PORT = 10000

#### spec #### -------------------------------------------------------
common_plugin_config = [
        "component_id=%component_id%",
        "instance=%hostname%/%plugin%",
        "producer=%hostname%",
    ]
spec = {
    "name" : CLUSTERNAME,
    "description" : "{}'s test_agg cluster".format(USER),
    "type" : "NA",
    "templates" : { # generic template can apply to any object by "!extends"
    }, # templates
    "nodes" : [
        {
            "hostname" : "node-1",
            "component_id" : 1,
            "daemons" : [
                {
                    "name" : "sshd", # for debugging
                    "type" : "sshd",
                },
                {
                    "name" : "sampler-daemon",
                    "type" : "ldmsd",
                    "listen" : [ { "port" : 411, "xprt" : "sock" }, ],
                    "samplers" : [
                        {
                            "plugin" : "list_sampler",
                            "interval" : 1000000,
                            "offset" : 0,
                            "config" : common_plugin_config,
                            "start" : True,
                        },
                    ],
                },
            ],
        },
    ], # nodes

    #"image": "ovis-centos-build:slurm",
    "cap_add": [ "SYS_PTRACE", "SYS_ADMIN" ],
    "image": args.image,
    "ovis_prefix": PREFIX,
    "env" : { "FOO": "BAR" },
    "mounts": [
        "{}:/db:rw".format(DB),
        "{0}:{1}:ro".format(os.path.realpath(sys.path[0]), "/tada-src"),
    ] + args.mount +
    ( ["{0}:{0}:ro".format(SRC)] if SRC else [] ),
}

#### helper functions ####

def EXPECT(val, expected):
    if val != expected:
        raise RuntimeError("\n  EXPECTING: {}\n  GOT: {}".format(expected, val))

@atexit.register
def at_exit():
    test.finish()
    cluster.remove() # this destroys entire cluster


#### test definition ####

test = TADA.Test(test_suite = "LDMSD",
                 test_type = "FVT",
                 test_name = "ldms_list_test",
                 test_desc = "Test ldms_list feature",
                 test_user = args.user,
                 commit_id = COMMIT_ID,
                 tada_addr = args.tada_addr)
test.add_assertion( 1, "check list_sampler on list_agg.py")

test.add_assertion( 2, "(1st update) check set1 on list_samp.py")
test.add_assertion( 3, "(1st update) check set3_p on list_samp.py")
test.add_assertion( 4, "(1st update)check set3_c on list_samp.py")

test.add_assertion( 5, "(1st update)check set1 on list_agg.py")
test.add_assertion( 6, "(1st update)check set3_p on list_agg.py")
test.add_assertion( 7, "(1st update)check set3_c on list_agg.py")

test.add_assertion( 8, "(2nd update) check set1 on list_samp.py")
test.add_assertion( 9, "(2nd update) check set3_p on list_samp.py")
test.add_assertion(10, "(2nd update) check set3_c on list_samp.py")

test.add_assertion(11, "(2nd update) check set1 on list_agg.py")
test.add_assertion(12, "(2nd update) check set3_p on list_agg.py")
test.add_assertion(13, "(2nd update) check set3_c on list_agg.py")

test.add_assertion(14, "(3rd update) check set1 on list_samp.py")
test.add_assertion(15, "(3rd update) check set3_p on list_samp.py")
test.add_assertion(16, "(3rd update) check set3_c on list_samp.py")

test.add_assertion(17, "(3rd update) check set1 on list_agg.py")
test.add_assertion(18, "(3rd update) check set3_p on list_agg.py")
test.add_assertion(19, "(3rd update) check set3_c on list_agg.py")

test.add_assertion(20, "(4th update; list uncahnged) check set1 on list_samp.py")
test.add_assertion(21, "(4th update; list uncahnged) check set3_p on list_samp.py")
test.add_assertion(22, "(4th update; list uncahnged) check set3_c on list_samp.py")

test.add_assertion(23, "(4th update; list uncahnged) check set1 on list_agg.py")
test.add_assertion(24, "(4th update; list uncahnged) check set3_p on list_agg.py")
test.add_assertion(25, "(4th update; list uncahnged) check set3_c on list_agg.py")

test.add_assertion(26, "(5th update; list del) check set1 on list_samp.py")
test.add_assertion(27, "(5th update; list del) check set3_p on list_samp.py")
test.add_assertion(28, "(5th update; list del) check set3_c on list_samp.py")

test.add_assertion(29, "(5th update; list del) check set1 on list_agg.py")
test.add_assertion(30, "(5th update; list del) check set3_p on list_agg.py")
test.add_assertion(31, "(5th update; list del) check set3_c on list_agg.py")

test.add_assertion(32, "(6th update; list unchanged) check set1 on list_samp.py")
test.add_assertion(33, "(6th update; list unchanged) check set3_p on list_samp.py")
test.add_assertion(34, "(6th update; list unchanged) check set3_c on list_samp.py")

test.add_assertion(35, "(6th update; list unchanged) check set1 on list_agg.py")
test.add_assertion(36, "(6th update; list unchanged) check set3_p on list_agg.py")
test.add_assertion(37, "(6th update; list unchanged) check set3_c on list_agg.py")


test.start()

log.info("-- Get or create the cluster --")
cluster = LDMSDCluster.get(spec["name"], create = True, spec = spec)

node1 = cluster.get_container("node-1")

log.info("-- Start daemons --")
cluster.start_daemons()
cluster.make_known_hosts()

log.info("... wait a bit to make sure ldmsd's are up")
time.sleep(2)

log.info("start list_samp.py and list_agg.py interactive sessions")
# interactive agg
isamp = node1.exec_interact(["/usr/bin/python3", "-i", "/tada-src/python/list_samp.py"])
time.sleep(2)
# interactive samp
iagg = node1.exec_interact(["/usr/bin/python3", "-i", "/tada-src/python/list_agg.py"])
time.sleep(2)

osamp = isamp.read()
oagg = iagg.read()

EXPECT(osamp, ">>> ")
EXPECT(oagg, ">>> ")

# reaching here w/o error means all set data has been verified on list_agg
# see `python/list_agg.py`.

# test.add_assertion( 1, "check list_sampler on list_agg.py")
test.assert_test(1, True, "OK")

#test.add_assertion( 2, "(1st update) check set1 on list_samp.py")
#test.add_assertion( 3, "(1st update) check set3_p on list_samp.py")
#test.add_assertion( 4, "(1st update)check set3_c on list_samp.py")
test.assert_test(2, True, "OK")
test.assert_test(3, True, "OK")
test.assert_test(4, True, "OK")

#test.add_assertion( 5, "(1st update)check set1 on list_agg.py")
#test.add_assertion( 6, "(1st update)check set3_p on list_agg.py")
#test.add_assertion( 7, "(1st update)check set3_c on list_agg.py")
test.assert_test(5, True, "OK")
test.assert_test(6, True, "OK")
test.assert_test(7, True, "OK")

def pycmd(tty, cmd, retry = 3):
    """cmd must be single command w/o new line"""
    sio = io.StringIO()
    tty.write(cmd)
    # flush the echo
    while tty.read() != '':
        continue
    # ENTER to execute
    tty.write("\n")
    count = 0
    end = False
    while count < retry:
        o = tty.read(idle_timeout=0.3)
        if len(o):
            count = 0 # reset
        else:
            count += 1
        sio.write(o)
        if sio.getvalue().endswith(">>> "):
            end = True
            break
    if not end:
        raise RuntimeError("Python '{cmd}` not responding".format(**vars()))
    o = sio.getvalue()
    D.pyout = o
    # remove the echoed cmd and the prompt
    return o[ 2 : -4 ]

names = [ "set1", "set3_p", "set3_c" ]

# 2nd sampling on samp
log.info("2nd sampling on the sampler...")
I=2
cmd = "".join( "update_set({name}, {i});".format(**vars()) \
                   for name, i in zip(names, range(I, I+3))  )
o = pycmd(isamp, cmd)
assert( o == '' ) # sampling OK
cmd = "".join( "verify_set({name});assert({name}[0]=={i});".format(**vars()) \
                   for name, i in zip(names, range(I, I+3))  )
o = pycmd(isamp, cmd)
assert( o == '' ) # verify OK
#test.add_assertion( 8, "(2nd update) check set1 on list_samp.py")
#test.add_assertion( 9, "(2nd update) check set3_p on list_samp.py")
#test.add_assertion(10, "(2nd update) check set3_c on list_samp.py")
test.assert_test( 8, True, "OK")
test.assert_test( 9, True, "OK")
test.assert_test(10, True, "OK")

# 2nd set update on agg
log.info("2nd update on the aggregator...")
cmd = "".join( "{name}.update();".format(**vars()) for name in names  )
o = pycmd(iagg, cmd)
assert( o == '' ) # update OK
# verify
cmd = "".join( "verify_set({name});assert({name}[0]=={i});".format(**vars()) \
                   for name, i in zip(names, range(I, I+3))  )
o = pycmd(iagg, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(11, "(2nd update) check set1 on list_agg.py")
#test.add_assertion(12, "(2nd update) check set3_p on list_agg.py")
#test.add_assertion(13, "(2nd update) check set3_c on list_agg.py")
test.assert_test(11, True, "OK")
test.assert_test(12, True, "OK")
test.assert_test(13, True, "OK")

# 3nd sampling on samp
log.info("3rd sampling on the sampler...")
I=3
cmd = "".join( "update_set({name}, {i});".format(**vars()) \
                   for name, i in zip(names, range(I, I+3))  )
o = pycmd(isamp, cmd)
assert( o == '' ) # sampling OK
# verify
cmd = "".join( "verify_set({name});assert({name}[0]=={i});".format(**vars()) \
                   for name, i in zip(names, range(I, I+3))  )
o = pycmd(isamp, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(14, "(3rd update) check set1 on list_samp.py")
#test.add_assertion(15, "(3rd update) check set3_p on list_samp.py")
#test.add_assertion(16, "(3rd update) check set3_c on list_samp.py")
test.assert_test(14, True, "OK")
test.assert_test(15, True, "OK")
test.assert_test(16, True, "OK")

# 3nd set update on agg
log.info("3rd update on the aggregator...")
cmd = "".join( "{name}.update();".format(**vars()) for name in names  )
o = pycmd(iagg, cmd)
assert( o == '' ) # update OK
# verify
cmd = "".join( "verify_set({name});assert({name}[0]=={i});".format(**vars()) \
                   for name, i in zip(names, range(I, I+3))  )
o = pycmd(iagg, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(17, "(3rd update) check set1 on list_agg.py")
#test.add_assertion(18, "(3rd update) check set3_p on list_agg.py")
#test.add_assertion(19, "(3rd update) check set3_c on list_agg.py")
test.assert_test(17, True, "OK")
test.assert_test(18, True, "OK")
test.assert_test(19, True, "OK")


# 4th sample
log.info("4th sampling on the sampler...")
cmd = "".join("{name}.transaction_begin();{name}.transaction_end();" \
                        .format(**vars()) \
                        for name in names  )
o = pycmd(isamp, cmd)
assert( o == '' ) # sampling OK
# set3_p does not copy previous buffer if the heap structure unchanged.
# We expect set3_p[0] being 2 (the value of the first sample of set3_p).
cmd = """\
verify_set(set1);assert(set1[0]==3);\
verify_set(set3_p);assert(set3_p[0]==2);\
verify_set(set3_c);assert(set3_c[0]==5);\
"""
o = pycmd(isamp, cmd)
assert( o == '' ) # verify OK

#test.add_assertion(20, "(4th update; list uncahnged) check set1 on list_samp.py")
#test.add_assertion(21, "(4th update; list uncahnged) check set3_p on list_samp.py")
#test.add_assertion(22, "(4th update; list uncahnged) check set3_c on list_samp.py")
test.assert_test(20, True, "OK")
test.assert_test(21, True, "OK")
test.assert_test(22, True, "OK")

# 4th set update on agg
log.info("4th update on the aggregator...")
cmd = "".join( "{name}.update();".format(**vars()) for name in names  )
o = pycmd(iagg, cmd)
assert( o == '' ) # update OK
# verify
cmd = """\
verify_set(set1);assert(set1[0]==3);\
verify_set(set3_p);assert(set3_p[0]==2);\
verify_set(set3_c);assert(set3_c[0]==5);\
"""
o = pycmd(iagg, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(23, "(4th update; list uncahnged) check set1 on list_agg.py")
#test.add_assertion(24, "(4th update; list uncahnged) check set3_p on list_agg.py")
#test.add_assertion(25, "(4th update; list uncahnged) check set3_c on list_agg.py")
test.assert_test(23, True, "OK")
test.assert_test(24, True, "OK")
test.assert_test(25, True, "OK")


# 5th sample -- list del
log.info("5th sampling on the sampler...")
cmd = "".join("""\
{name}.transaction_begin();\
{name}[-2].delete(next(iter({name}[-2])));\
{name}.transaction_end();\
""".format(**vars()) for name in names  )
o = pycmd(isamp, cmd)
assert( o == '' ) # update OK
# NOTE: due to transactoin begin/end, we're now in buffer 2
cmd = """\
set1_data=gen_data(3);dump1=set1_data[-2][1].pop(0);\
set3_p_data=gen_data(3);dump2=set3_p_data[-2][1].pop(0);\
set3_c_data=gen_data(5);dump3=set3_c_data[-2][1].pop(0);\
verify_set(set1, set1_data);\
verify_set(set3_p, set3_p_data);\
verify_set(set3_c, set3_c_data);\
"""
o = pycmd(isamp, cmd)
assert( o == '' ) # update OK
#test.add_assertion(26, "(5th update; list del) check set1 on list_samp.py")
#test.add_assertion(27, "(5th update; list del) check set3_p on list_samp.py")
#test.add_assertion(28, "(5th update; list del) check set3_c on list_samp.py")
test.assert_test(26, True, "OK")
test.assert_test(27, True, "OK")
test.assert_test(28, True, "OK")

# 5th set update on agg
log.info("5th update on the aggregator...")
cmd = "".join( "{name}.update();".format(**vars()) for name in names  )
o = pycmd(iagg, cmd)
assert( o == '' ) # update OK
# verify
cmd = """\
set1_data=gen_data(3);dump1=set1_data[-2][1].pop(0);\
set3_p_data=gen_data(3);dump2=set3_p_data[-2][1].pop(0);\
set3_c_data=gen_data(5);dump3=set3_c_data[-2][1].pop(0);\
verify_set(set1, set1_data);\
verify_set(set3_p, set3_p_data);\
verify_set(set3_c, set3_c_data);\
"""
o = pycmd(iagg, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(29, "(5th update; list del) check set1 on list_agg.py")
#test.add_assertion(30, "(5th update; list del) check set3_p on list_agg.py")
#test.add_assertion(31, "(5th update; list del) check set3_c on list_agg.py")
test.assert_test(29, True, "OK")
test.assert_test(30, True, "OK")
test.assert_test(31, True, "OK")


# 6th sample -- just begin/end transaction to see if the modified heap structure
#               and data are copied over from the previous buffer.
log.info("6th sampling on the sampler...")
cmd = "".join("{name}.transaction_begin();{name}.transaction_end();" \
                        .format(**vars()) \
                        for name in names  )
o = pycmd(isamp, cmd)
assert( o == '' ) # sampling OK
# verify
cmd = """\
set1_data=gen_data(3);dump1=set1_data[-2][1].pop(0);\
set3_p_data=gen_data(3);dump2=set3_p_data[-2][1].pop(0);\
set3_c_data=gen_data(5);dump3=set3_c_data[-2][1].pop(0);\
verify_set(set1, set1_data);\
verify_set(set3_p, set3_p_data);\
verify_set(set3_c, set3_c_data);\
"""
o = pycmd(isamp, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(32, "(6th update; list unchanged) check set1 on list_samp.py")
#test.add_assertion(33, "(6th update; list unchanged) check set3_p on list_samp.py")
#test.add_assertion(34, "(6th update; list unchanged) check set3_c on list_samp.py")
test.assert_test(32, True, "OK")
test.assert_test(33, True, "OK")
test.assert_test(34, True, "OK")

# 6th agg update
log.info("6th update on the updator...")
cmd = "".join( "{name}.update();".format(**vars()) for name in names  )
o = pycmd(iagg, cmd)
assert( o == '' ) # update OK
# verify
cmd = """\
set1_data=gen_data(3);dump1=set1_data[-2][1].pop(0);\
set3_p_data=gen_data(3);dump2=set3_p_data[-2][1].pop(0);\
set3_c_data=gen_data(5);dump3=set3_c_data[-2][1].pop(0);\
verify_set(set1, set1_data);\
verify_set(set3_p, set3_p_data);\
verify_set(set3_c, set3_c_data);\
"""
o = pycmd(iagg, cmd)
assert( o == '' ) # verify OK
#test.add_assertion(35, "(6th update; list unchanged) check set1 on list_agg.py")
#test.add_assertion(36, "(6th update; list unchanged) check set3_p on list_agg.py")
#test.add_assertion(37, "(6th update; list unchanged) check set3_c on list_agg.py")
test.assert_test(35, True, "OK")
test.assert_test(36, True, "OK")
test.assert_test(37, True, "OK")

# test.finish() in at_exit()
